% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/utils.R
\name{epiaware_call}
\alias{epiaware_call}
\title{Generic wrapper for calling Julia EpiAware functions}
\usage{
epiaware_call(
  fn_name,
  ...,
  .param_map = NULL,
  .class = c("epiaware_generic", "epiaware_model")
)
}
\arguments{
\item{fn_name}{Character string. Name of the Julia function to call.}

\item{...}{Named arguments to pass to the Julia function.}

\item{.param_map}{Named character vector mapping R parameter names to Julia
names. Use this when Julia uses Greek letters or other characters not
easily typed in R. Example: c(theta_priors = "θ_priors", eps_t = "ϵ_t").}

\item{.class}{Character vector. S3 classes to add to the returned object.
Default is c("epiaware_generic", "epiaware_model").}
}
\value{
An S3 object containing the Julia reference and specifications.
}
\description{
Provides access to Julia EpiAware functions not yet wrapped in R.
This is an "escape hatch" for accessing newer or experimental EpiAware
features before they get explicit R wrappers.
}
\examples{
\dontrun{
# Call a hypothetical new EpiAware component not yet wrapped
custom_model <- epiaware_call(
  "NewLatentModel",
  param1 = 0.5,
  param2 = norm(0, 1)
)

# For Julia functions with Greek letters, use parameter mapping
eps_model <- epiaware_call("HierarchicalNormal", halfnorm(0.1))
ma2 <- epiaware_call(
  "MA",
  theta_priors = list(norm(0, 0.1), norm(0, 0.1)),
  eps_t = eps_model,
  .param_map = c(theta_priors = "θ_priors", eps_t = "ϵ_t")
)
}

}
